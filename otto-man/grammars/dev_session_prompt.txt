PROJECT CONTEXT (Godot 4.3, 2D Action + Village Sim with LLM-driven NPCs)

You are joining an in-progress Godot 4.3 project (“otto-man”). The game combines a 2D action platformer with a village simulation. NPCs can converse with the player (and later with each other). An on-device LLM (via LLamaSharp) generates NPC responses and updates the NPC’s state.

Core goal for LLM I/O: Output MUST be well-formed JSON with a strict schema governed by GBNF. The model decides if the current dialogue is Significant (changes Info and/or History) or Insignificant (no state changes). DialogueHistory is appended only when Significant. Output always includes a Generated Dialogue string (first-person NPC reply).

Key Modules
- UI: Ui/npc_window.tscn + Ui/npc_window.gd (chat window, input line, send button; calls NPCDialogueManager)
- Dialogue Orchestration: autoload/NPCDialogueManager.gd (builds prompt, sends to LlamaService, parses structured JSON, enforces rules, emits dialogue_processed)
- LLM Backend: autoload/LlamaService.cs (LLamaSharp wrapper, loads GBNF grammar at grammars/output.gbnf, runs inference, emits GenerationComplete)
- NPC Integration: village/scripts/Worker.gd (NPC entity; opens chat window; relays inputs to NPCDialogueManager; updates NPC_Info with returned new state to persist memory)
- Grammar: grammars/output.gbnf (defines the JSON structure the model must output)

Data Model (per-NPC State)
- Info (Dictionary<string, string>): current attributes; example keys used today: Name, Occupation, Mood, Gender, Age, Health. No new keys allowed; if a title is bestowed and there is no Title key, append it to Name (e.g., "Kamil the Ironfist").
- History (Array<string>): chronological list of believed facts and landmark events. On contradiction, remove the superseded entry and append one explicit correction entry referencing old and new belief.

GBNF (grammars/output.gbnf)
- Enforces exact top-level order and keys:
  { "Info": object, "History": string[], "Generated Dialogue": string }
- Allows flexible whitespace (ws) but no placeholders like <AGE>.

Prompt Contract (NPCDialogueManager.gd builds this)
Input State:
{
  "Info": <JSON from current NPC_Info.Info>,
  "History": <JSON array from NPC_Info.History>
}

Player Dialogue: "<raw player text>"

Instructions (strict highlights):
- The model must decide Significance strictly based on whether its OUTPUT Info or History differs from the INPUT.
- IF Significant: Update Info (only existing keys) and/or History (append, or replace a superseded entry then append a one-line correction).
- IF Insignificant: Info and History MUST be byte-identical to INPUT; only Generated Dialogue changes.
- Generated Dialogue must be first-person NPC speech, no name prefix, no narration/stage directions.
- NEVER add new keys to Info.

Examples
- Insignificant (identity query when Name exists):
  Input Info.Name = "Cora"; Player: "what's your name?" -> Output Info/History identical; Generated Dialogue: "I'm Cora."
- Significant (title bestowed):
  Input Info.Name = "Kamil"; Player: "I grant you the title Ironfist" -> Output Info.Name = "Kamil the Ironfist"; History append: "Got a new title: the Ironfist"; Generated Dialogue: first-person.
- Significant (contradiction):
  Input History contains "Mother died"; Player: "I saw your mother; she is alive" -> Output History removes the superseded entry and appends one correction: "Correction: Previously believed mother died; now learned mother is alive."

Runtime Rules Enforced in Code (NPCDialogueManager.gd)
- Significance is determined only by differences in Info or History between Input and Output (JSON-stringified comparisons).
- Merge behavior on Significant:
  - Info: accept only for existing keys; fill missing keys from old Info.
  - History: accept model-provided authoritative array.
- Merge behavior on Insignificant: return original Info/History exactly; only Generated Dialogue is used.
- Generated Dialogue fallback to "..." if blank.

Current Status (where we left off)
- Grammar validated and loaded successfully by LLamaService; spaces in output are harmless.
- Prompt explicitly teaches significance with positive and negative examples; identity queries are Insignificant when Name exists.
- UI chat window stable; button/Enter submission sends raw text; NPC replies appended to UI without re-looping requests.

Next Steps
- Apply returned new_state (Info/History) in Worker.gd immediately after dialogue_processed to persist NPC memory in-session (and ensure it's saved to your JSON save pipeline on save events).
- Expand significant examples over time (e.g., mission offers, relationship changes) to improve model reliability.
- Optional (later): Two-pass design or explicit "Significant": "true|false" flag in grammar if we ever need pre-commit decisions.

Project Structure Pointers
- autoload/NPCDialogueManager.gd: Prompt builder, JSON parsing, significance logic, merge rules, emits dialogue_processed(npc_name, new_state, generated_dialogue, was_significant)
- autoload/LlamaService.cs: Loads model, grammar; GenerateResponseAsync(prompt, maxNewTokens); emits GenerationComplete(result)
- Ui/npc_window.gd: Sends text, appends to chat UI, disables Send until reply; receives NPCDialogueProcessed and re-enables Send
- village/scripts/Worker.gd: Opens/closes NPC window; bridges to NPCDialogueManager; should write back updated NPC_Info with new state
- grammars/output.gbnf: Grammar rules for exact JSON shape

Copy-Paste Ready Prompt Template (to generate a reply for one turn)
Input State:
{
  "Info": %INFO_JSON%,
  "History": %HISTORY_JSON%
}

Player Dialogue: "%PLAYER_TEXT%"

Instructions:
- A dialogue is Significant ONLY if your OUTPUT Info or History differs from the INPUT.
- IF Significant: Update Info (existing keys only) and/or History (append or perform contradiction correction).
- IF Insignificant: Copy Info, History EXACTLY from INPUT.
- Generated Dialogue MUST be a first-person NPC line, no name prefix, no narration.
- NEVER add new keys to Info.
- Output ONLY JSON in this exact order: Info, History, Generated Dialogue.

---
Session Notes - DialogueHistory Removal
- Removed DialogueHistory from GBNF grammar (output.gbnf)
- Updated NPCDialogueManager.gd to remove DialogueHistory from prompt construction, parsing, and state management
- Updated dev_session_prompt.txt to reflect DialogueHistory removal throughout documentation
- Simplified JSON structure to: {"Info": object, "History": array, "Generated Dialogue": string}
- Removed all DialogueHistory-related merge logic and validation
- Updated examples to remove DialogueHistory references

Open Alignment Items (No code changes made)
- History contradiction policy:
  - Current file notes favor paraphrasing/augmenting old beliefs instead of deleting them. Ensure this policy is consistently reflected in both the prompt text and merge behavior. Today, merge accepts the model-provided History; verify it never hard-deletes unless the paraphrase format preserves prior context.
- Generated Dialogue:
  - Continue enforcing first-person, no name prefix; optionally add a short test set to catch regressions.
- Examples coverage:
  - Consider adding one more example for non-identity, clearly insignificant small-talk (e.g., weather) to further anchor insignificance.
- Temperature and tokens:
  - If outputs drift, consider a slightly lower temperature or increasing max tokens; defer until (and if) needed.
