## GBNF and NPC Interaction Enhancement Checklist

**Goal:** Ensure the LLM outputs a guaranteed JSON structure for NPC interactions, allowing for dynamic updates to NPC state (Info, History, Dialogue History) based on dialogue significance.

**Target JSON Structure:**
```json
{
  "Info": { "Key1": "Value1", ... },
  "History": ["String1", ... ],
  "Dialogue History": {
    "Title1": { "SpeakerA": "LineA", "self": "LineB", ... },
    "Title2": { ... },
    ...
  },
  "Generated Dialogue": "NPC's response string."
}
```

**Checklist Items:**

1.  **Define Core GBNF Elements:**
    *   `string-element`: Define a robust rule for JSON strings (handling quotes, escapes). (Already mostly done, review for context).
    *   `ws`: Define a rule for optional whitespace. (Already mostly done, review for context).

2.  **Define Reusable Object Structure:**
    *   `generic-string-map-object`: Create a GBNF rule for a generic JSON object that maps string keys to string values (e.g., ` { ws ("\"key\"" ws ":" ws string-element (ws "," ws "\"key\"" ws ":" ws string-element)*)? ws } ` ). This will be used for the `Info` field and for each individual entry within `Dialogue History`.

3.  **Define `Info` Field GBNF:**
    *   Utilize `generic-string-map-object` for the `Info` field's value.

4.  **Define `History` Field GBNF:**
    *   `history-array`: Create a GBNF rule for an array of `string-element`. (Already mostly done, review for context).

5.  **Define `Dialogue History` Field GBNF (Nested Structure):**
    *   `dialogue-history-object`: Create a GBNF rule for the main `Dialogue History` object. This object will map string keys (dialogue titles) to `generic-string-map-object` values. (e.g., ` { ws (string-element ws ":" ws generic-string-map-object (ws "," ws string-element ws ":" ws generic-string-map-object)*)? ws } `).

6.  **Define `Generated Dialogue` Field GBNF:**
    *   This will simply be a `string-element`.

7.  **Define Root GBNF Object:**
    *   `root` (or `npc-json-output`): Combine the above rules to define the top-level JSON object containing the four keys: `"Info"`, `"History"`, `"Dialogue History"`, and `"Generated Dialogue"`, ensuring correct commas and structure.

8.  **Assemble `output.gbnf`:**
    *   Write all defined rules into `OttoMan/otto-man/otto-man/grammars/output.gbnf`, ensuring it's clean, comment-free, and all rules are correctly interconnected.

9.  **Update `syntaxrules.txt` Documentation:**
    *   Thoroughly document the new, complete GBNF structure in `OttoMan/otto-man/otto-man/grammars/syntaxrules.txt`.
    *   Provide clear explanations for each rule, especially the `generic-string-map-object` and the nested structure of `dialogue-history-object`.
    *   Include an example of the full JSON output that this GBNF would produce, matching your provided "WHAT WE WANT AS THE RESPONSE" structure.

10. **Testing and Verification (Manual Steps for You):**
    *   Replace the content of `output.gbnf` with the newly designed grammar.
    *   Run the Godot project.
    *   Provide a sample prompt (like your "SIGNIFICANT DIALOGUE EXAMPLE") to an NPC (e.g., Kamil).
    *   Observe the raw LLM output in the Godot console (logged by `LlamaService.cs`).
    *   Verify if the output strictly adheres to the new GBNF (correct keys, types, nesting).
    *   Check if Godot's JSON parser in `Osman_NPC.gd` or `kamil_npc.gd` successfully parses the output without errors.
    *   Confirm that the NPC's internal state (`NPC_Info` dictionary in GDScript) is updated correctly based on the parsed JSON, especially the nested `DialogueHistory`.
    *   Test both significant and insignificant dialogue examples (as per your prompt instructions) to ensure the LLM correctly either updates or preserves the `Info`, `History`, and `Dialogue History` fields while always providing `Generated Dialogue`.

11. **Review Prompt Engineering (Ongoing):**
    *   While GBNF enforces structure, the LLM's ability to correctly determine significance and populate fields meaningfully depends heavily on the prompt in `_construct_full_prompt` in `Osman_NPC.gd` and `kamil_npc.gd`.
    *   Continuously refine these prompts to improve the LLM's reasoning for state updates. The GBNF will ensure that *if* it decides to update, it does so in the correct format.

This checklist should guide us effectively. We'll tackle these steps one by one tomorrow, starting with the GBNF definitions.
