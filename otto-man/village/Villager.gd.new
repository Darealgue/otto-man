extends CharacterBody2D
class_name Villager

# Köylü durumları
enum VillagerState {
	WANDERING,
	GETTING_TOOLS,
	WORKING,
	RETURNING_HOME,
	ENTERING_BUILDING,
	RESTING,
	SOCIALIZING,
	GOING_HOME,
	SLEEPING,
	WAKING_UP,
	GOING_TO_WORK
}

# Kişilik tipleri
enum PersonalityType {
	HARDWORKING,  # Çalışkan
	SOCIAL,       # Sosyal
	LAZY         # Tembel
}

# İşçi tanımlama özellikleri
@export var worker_id: int = -1
@export var resource_type: String = "wandering"

# Hareket ve fizik özellikleri
var move_speed: float = 55.0
var gravity: float = 980.0
var is_on_ground: bool = false
var jump_height: float = 0
var snap_vector: Vector2 = Vector2.DOWN * 32
var fixed_y_position: float = 950.0
var target_position: Vector2 = Vector2.ZERO
var home_position: Vector2 = Vector2.ZERO
var direction: int = 1

# Durum ve aktivite özellikleri
var state: VillagerState = VillagerState.WANDERING
var personality_type: int = PersonalityType.SOCIAL
var is_job_done: bool = false
var is_returning_home: bool = false
var job_duration: float = 0.0
var max_job_duration: float = 30.0
var next_target_change: float = 0.0

# Performans ve davranış özellikleri
var efficiency: float = 1.0
var energy_level: float = 100.0
var happiness: float = 70.0
var schedule_variance: float = 15.0
var speed_factor: float = 1.0

# Araç-gereç yönetimi
var has_tools: bool = false
var tool_sprite_path: String = ""

# Zaman yönetimi
var activity_transition_timer: float = 0.0
var next_check_time: float = 3.0
var transition_early_minutes: float = 10.0
var current_personal_activity = null

# Hedef ve kaynak noktaları
var target_building = null
var gathering_point = null

# Node referansları
@onready var sprite: Sprite2D = $Sprite2D
@onready var animation_player: AnimationPlayer = $AnimationPlayer if has_node("AnimationPlayer") else null
@onready var state_label: Label = $StateLabel if has_node("StateLabel") else null
@onready var info_label: Label = $Label if has_node("Label") else null
@onready var tool_sprite: Sprite2D = $ToolSprite if has_node("ToolSprite") else null

# Manager referansları
var schedule_manager = null
var time_manager = null

# Sinyaller
signal state_changed(new_state: int)
signal energy_changed(new_energy: float)
signal job_duration_changed(new_duration: float)

func _ready() -> void:
	# Çarpışma katmanlarını ayarla
	collision_layer = 16  # Köylü katmanı (5. bit)
	collision_mask = 1    # Sadece zemin ile etkileşim (1. bit)
	
	# Başlangıç pozisyonunu ayarla
	position.y = fixed_y_position
	
	# Etiketleri bul
	state_label = get_node_or_null("StateLabel")
	info_label = get_node_or_null("InfoLabel")
	sprite = get_node_or_null("Sprite2D")
	
	# Başlangıç durumunu ayarla
	state = VillagerState.WANDERING
	job_duration = 0
	
	# Başlangıç hedef pozisyonunu ayarla
	target_position = Vector2(
		randf_range(0, 1920),  # Ekran genişliği
		fixed_y_position
	)
	
	print("Köylü hazır - ID: ", worker_id, ", Kaynak: ", resource_type)
	
	# State etiketi yoksa oluştur
	if not state_label:
		state_label = Label.new()
		state_label.name = "StateLabel"
		state_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
		state_label.position = Vector2(-60, -60)
		state_label.custom_minimum_size = Vector2(120, 20)
		state_label.add_theme_color_override("font_color", Color(1, 1, 0))
		add_child(state_label)
	
	# Kimlik etiketini güncelle
	if info_label:
		info_label.text = "İşçi #" + str(worker_id) + "\n" + resource_type
	
	# Durum etiketini güncelle
	_update_state_label()
	
	# ScheduleManager ve TimeManager'a bağlan
	schedule_manager = get_node_or_null("/root/ScheduleManager")
	time_manager = get_node_or_null("/root/TimeManager")
	
	if schedule_manager and time_manager:
		# Mevcut aktiviteyi kontrol et
		var current_time = time_manager.get_time_text()
		var activity = schedule_manager.get_activity_for_villager(worker_id, current_time)
		_update_state_based_on_activity(activity)

func _physics_process(delta: float) -> void:
	# Update debug info every 2 seconds
	activity_transition_timer += delta
	if activity_transition_timer >= 2.0:
		_debug_print_status()
		activity_transition_timer = 0.0

	# Keep Y position fixed
	position.y = fixed_y_position
	velocity.y = 0
	
	# Duruma göre işlem yap
	match state:
		VillagerState.WANDERING:
			_process_wandering(delta)
		VillagerState.GETTING_TOOLS:
			_process_getting_tools(delta)
		VillagerState.WORKING:
			_process_working(delta)
		VillagerState.RETURNING_HOME:
			_process_returning_home(delta)
	
	# Hareketi uygula
	move_and_slide()
	
	# Yönü güncelle
	if velocity.x != 0:
		direction = sign(velocity.x)
		if sprite:
			sprite.flip_h = (direction < 0)

func _update_state_based_on_activity(activity) -> void:
	# Aktiviteye göre durumu güncelle
	match activity:
		"SLEEPING":
			state = VillagerState.WANDERING  # Uyuma yerine gezinme
		"WORKING":
			if resource_type != "wandering":
				state = VillagerState.GETTING_TOOLS
		"RESTING":
			state = VillagerState.WANDERING  # Dinlenme yerine gezinme
		"SOCIALIZING":
			state = VillagerState.WANDERING  # Sosyalleşme yerine gezinme
	
	# Durum etiketini güncelle
	_update_state_label()

func _process_wandering(delta: float) -> void:
	if resource_type != "wandering" and target_building:
		print("[DEBUG] Kaynak atanmış köylü gezinmeden çıkıyor - ID:%s" % worker_id)
		_change_state(VillagerState.GETTING_TOOLS)
		return
	
	activity_transition_timer += delta
	if activity_transition_timer >= 3.0 or position.x == target_position.x:
		_set_new_wandering_target()
		activity_transition_timer = 0.0
		
	var distance = abs(position.x - target_position.x)
	print("[DEBUG] Wandering - Target:%s Distance:%s" % [str(target_position), distance])
	
	if distance <= 50:
		velocity.x = 0
		position.x = target_position.x
		_set_new_wandering_target()
	else:
		var direction = sign(target_position.x - position.x)
		velocity.x = direction * (move_speed * 0.5)

func _process_sleeping(delta: float) -> void:
	velocity = Vector2.ZERO

func _process_waking_up(delta: float) -> void:
	velocity = Vector2.ZERO

func _process_getting_tools(delta: float) -> void:
	if target_building:
		var distance = abs(position.x - target_building.position.x)
		print("[DEBUG] Getting Tools - Distance to building:%s Position:%s" % [distance, str(Vector2(position.x, 950))])
		
		if distance <= 50:
			velocity.x = 0
			position.x = target_building.position.x
			print("[DEBUG] Binaya ulaşıldı, çalışmaya başlanıyor")
			_change_state(VillagerState.WORKING)
		else:
			var direction = sign(target_building.position.x - position.x)
			velocity.x = direction * move_speed

func _process_going_to_work(delta: float) -> void:
	# Hedef noktaya doğru hareket et
	var direction = (target_position - global_position).normalized()
	velocity.x = direction.x * move_speed
	velocity.y = 0
	
	if global_position.distance_to(target_position) < 10:
		_change_state(VillagerState.WORKING)

func _process_working(delta: float) -> void:
	if target_building:
		var distance = abs(position.x - target_building.position.x)
		
		# If we're at the building, stay there and work
		if distance <= 50:
			velocity.x = 0
			position.x = target_building.position.x
			job_duration += delta
			
			print("[DEBUG] Working - Progress:%s/%s" % [job_duration, max_job_duration])
			
			if job_duration >= max_job_duration:
				print("[DEBUG] İş tamamlandı, eve dönülüyor")
				_change_state(VillagerState.RETURNING_HOME)
				job_duration = 0
		else:
			# Move towards building if we somehow got pushed away
			var direction = sign(target_building.position.x - position.x)
			velocity.x = direction * move_speed

func _process_returning_home(delta: float) -> void:
	var home_x = 960  # Center of the screen
	var distance = abs(position.x - home_x)
	print("[DEBUG] Returning Home - Distance to home:%s" % [distance])
	
	if distance <= 50:
		velocity.x = 0
		position.x = home_x
		print("[DEBUG] Eve ulaşıldı, tekrar işe gidiliyor")
		_change_state(VillagerState.GETTING_TOOLS)
	else:
		var direction = sign(home_x - position.x)
		velocity.x = direction * move_speed

func _process_entering_building(delta: float) -> void:
	var direction = (target_position - global_position).normalized()
	velocity = direction * move_speed
	
	if global_position.distance_to(target_position) < 10:
		_change_state(VillagerState.SOCIALIZING)

func _process_resting(delta: float) -> void:
	velocity = Vector2.ZERO

func _process_socializing(delta: float) -> void:
	velocity = Vector2.ZERO

func _process_going_home(delta: float) -> void:
	var direction = (home_position - global_position).normalized()
	velocity = direction * move_speed
	
	if global_position.distance_to(home_position) < 10:
		_change_state(VillagerState.SLEEPING)

func _change_state(new_state: VillagerState) -> void:
	state = new_state
	print("Köylü ", worker_id, " durumu değişti: ", VillagerState.keys()[state])
	
	# Durum değişikliğine göre özel işlemler
	match state:
		VillagerState.SLEEPING:
			job_duration = 0.0
			velocity = Vector2.ZERO
			if sprite:
				sprite.rotation_degrees = 90
		
		VillagerState.WAKING_UP:
			job_duration = 0.0
			velocity = Vector2.ZERO
			if sprite:
				sprite.rotation_degrees = 90
		
		VillagerState.GETTING_TOOLS:
			job_duration = 0.0
			is_returning_home = false
			if sprite:
				sprite.rotation_degrees = 0
		
		VillagerState.GOING_TO_WORK:
			job_duration = 0.0
			is_returning_home = false
			_show_tools(true)
		
		VillagerState.WORKING:
			job_duration = 0.0
			velocity = Vector2.ZERO
			max_job_duration = randf_range(15.0, 30.0)
		
		VillagerState.RETURNING_HOME:
			is_returning_home = true
		
		VillagerState.ENTERING_BUILDING, VillagerState.RESTING, VillagerState.SOCIALIZING, VillagerState.WANDERING, VillagerState.GOING_HOME:
			_show_tools(false)
			if state in [VillagerState.RESTING, VillagerState.SOCIALIZING]:
				job_duration = 0.0
				velocity = Vector2.ZERO
			elif state == VillagerState.GOING_HOME:
				is_returning_home = true
	
	# Durum etiketini güncelle
	_update_state_label()

func _show_tools(show: bool) -> void:
	if tool_sprite:
		tool_sprite.visible = show
		has_tools = show

func _update_state_label() -> void:
	if state_label:
		var old_state = state_label.text if state_label.text else "YOK"
		state_label.text = VillagerState.keys()[state]
		print("[DEBUG] Durum değişti:", old_state, " -> ", state_label.text)

func setup(id: int, resource: String) -> void:
	print("\n[DEBUG] Setup başlıyor - ID:", id, " Resource:", resource)
	worker_id = id
	resource_type = resource
	
	# Kaynak tipine göre başlangıç durumunu ayarla
	if resource_type != "wandering":
		print("[DEBUG] Kaynak atandı, hedef bina aranıyor...")
		# Önce Village sahnesini bul
		var village = get_node_or_null("/root/Village")
		if village:
			# resource_buildings grubundaki tüm binaları kontrol et
			var buildings = get_tree().get_nodes_in_group("resource_buildings")
			for building in buildings:
				if building.resource_type == resource_type:
					target_building = building
					print("[DEBUG] Hedef bina bulundu:", building.name, " - Pozisyon:", building.global_position)
					state = VillagerState.GETTING_TOOLS
					break
			
			if not target_building:
				print("[DEBUG] HATA: ", resource_type, " tipi için bina bulunamadı!")
				state = VillagerState.WANDERING
		else:
			print("[DEBUG] HATA: Village sahnesi bulunamadı!")
			state = VillagerState.WANDERING
	else:
		print("[DEBUG] Kaynak atanmadı, gezinme durumuna geçiliyor")
		state = VillagerState.WANDERING
	
	print("[DEBUG] Durum ayarlandı:", VillagerState.keys()[state])
	_update_state_label()

func set_target_building(building) -> void:
	target_building = building
	if target_building != null:
		home_position = target_building.global_position

func set_gathering_point(point: Vector2) -> void:
	gathering_point = point
	target_position = point

func set_home_position(pos: Vector2) -> void:
	home_position = pos

func is_already_in_work_sequence() -> bool:
	var work_states = [
		VillagerState.GETTING_TOOLS,
		VillagerState.GOING_TO_WORK,
		VillagerState.WORKING,
		VillagerState.RETURNING_HOME,
		VillagerState.ENTERING_BUILDING
	]
	return work_states.has(state) 

func _debug_print_status() -> void:
	print("\n[DEBUG] Köylü %s durumu:" % worker_id)
	print("  - State:%s" % VillagerState.keys()[state])
	print("  - Resource:%s" % resource_type)
	print("  - Position:%s" % position)
	print("  - Velocity:%s" % velocity)
	print("  - Target Building:%s" % ("Var" if target_building else "Yok"))
	if target_building:
		print("  - Target Building Position:%s" % target_building.position)
		print("  - Distance to Target:%s" % abs(position.x - target_building.position.x))
	print("  - Job Duration:%s/%s" % [job_duration, max_job_duration])

func _set_new_wandering_target() -> void:
	target_position = Vector2(
		randf_range(-500, 2500),
		fixed_y_position
	)
	print("[DEBUG] Yeni gezinme hedefi:%s" % target_position) 